from matplotlib.pyplot import *
from funcoes import *
from statistics import *

# Base de Dados referente à probabilidade de um grupo de pessoas possuir diabetes com base em critérios como pressão sanguínea, gravidez e etc. Levantado por National Institute of Diabetes and Digestive and Kidney Diseases
# Disponível em: https://www.kaggle.com/datasets/akshaydattatraykhare/diabetes-dataset?resource=download

database = [62.70, 35.10, 67.20, 16.70, 20.10, 24.80, 13.40, 15.80, 23.20, 19.10, 53.70, 39.80, 58.70, 48.40, 55.10, 25.40, 18.30, 52.90, 70.40, 38.80, 45.10, 26.30, 25.40, 20.50, 25.70, 48.70, 24.50, 33.70, 54.60, 85.10, 26.70, 18.80, 51.20, 96.60, 42.00, 66.50, 50.30, 27.10, 69.60, 23.50, 72.10, 29.40, 56.40, 58.60, 34.40, 30.50, 49.10, 52.60, 34.20, 46.70, 71.80, 24.80, 25.40, 96.20, 17.30, 30.40, 27.00, 58.70, 69.90, 25.80, 20.30, 85.50, 84.50, 33.40, 18.90, 86.70, 41.10, 58.30, 23.10, 39.60, 14.00, 39.10, 37.00, 27.00, 30.70, 14.00, 10.20, 76.70, 23.70, 22.70, 69.80, 17.80, 32.40, 15.30, 16.50, 25.80, 44.30, 26.10, 27.70, 76.10, 25.50, 13.00, 32.30, 35.60, 32.50, 17.90, 26.20, 28.30, 93.00, 80.10, 20.70, 28.70, 33.60, 24.70, 19.90, 54.30, 19.20, 39.10, 58.80, 53.90, 22.00, 65.40, 44.30, 22.30, 75.90, 26.00, 40.40, 18.60, 27.80, 49.60, 45.20, 26.10, 40.30, 74.10, 36.10, 35.60, 45.70, 64.70, 8.80, 59.70, 53.20, 70.30, 15.90, 26.80, 28.60, 31.80, 27.20, 23.70, 57.20, 9.60, 21.80, 8.50, 39.90, 43.20, 68.70, 13.70, 33.70, 63.70, 83.30, 22.90, 81.70, 29.40, 20.40, 16.70, 36.80, 74.30, 72.20, 25.60, 70.90, 47.10, 49.50, 18.00, 54.20, 77.30, 67.80, 37.00, 71.90, 38.20, 31.90, 19.00, 95.60, 8.40, 72.50, 29.90, 26.80, 24.40, 74.50, 61.50, 64.00, 36.10, 14.20, 37.40, 38.30, 57.80, 13.60, 39.50, 18.70, 67.80, 90.50, 15.00, 87.40, 23.60, 78.70, 23.50, 32.40, 40.70, 60.50, 15.10, 28.90, 35.50, 29.00, 37.50, 16.40, 43.10, 26.00, 74.20, 51.40, 46.40, 26.10, 80.50, 20.90, 68.70, 66.60, 10.10, 19.80, 65.20, 8.90, 64.50, 23.80, 58.30, 39.40, 29.30, 47.90, 58.60, 68.60, 83.10, 58.20, 19.20, 44.60, 40.20, 32.90, 25.80, 42.70, 28.20, 14.30, 38.00, 28.40, 24.90, 23.80, 92.60, 54.30, 55.70, 9.20, 65.50, 29.90, 76.10, 61.20, 20.00, 22.60, 99.70, 93.30, 7.80, 24.00, 12.80, 25.40, 42.20, 25.10, 67.70, 29.60, 45.40, 74.40, 88.10, 33.40, 28.00, 26.20, 16.50, 25.90, 64.70, 61.90, 80.80, 34.00, 26.30, 43.40, 75.70, 61.30, 25.40, 69.20, 33.70, 52.00, 41.20, 84.00, 83.90, 42.20, 15.60, 20.90, 20.70, 21.50, 32.60, 14.30, 87.50, 31.30, 60.50, 43.30, 62.60, 31.50, 28.40, 34.50, 15.00, 12.90, 52.70, 19.70, 25.40, 73.10, 14.80, 12.30, 69.20, 20.00, 12.70, 12.20, 16.60, 28.20, 13.70, 26.00, 25.90, 93.20, 34.30, 89.30, 33.10, 47.20, 67.30, 38.90, 29.00, 48.50, 34.90, 65.40, 18.70, 27.90, 34.60, 23.70, 25.20, 24.30, 58.00, 55.90, 30.20, 96.20, 56.90, 37.80, 87.50, 58.30, 20.70, 30.50, 52.00, 38.50, 49.90, 36.80, 25.20, 30.60, 23.40, 54.50, 22.50, 81.60, 52.80, 29.90, 50.90, 23.80, 82.10, 23.60, 94.70, 22.10, 20.50, 66.00, 23.90, 45.20, 94.90, 44.40, 34.00, 38.90, 46.30, 80.30, 94.40, 19.60, 38.90, 24.10, 16.10, 15.10, 28.60, 28.00, 13.50, 52.00, 37.60, 33.60, 70.20, 67.40, 52.80, 25.60, 53.40, 25.80, 55.40, 62.40, 21.90, 50.70, 56.10, 49.60, 42.10, 51.60, 26.40, 25.60, 32.80, 28.40, 23.30, 10.80, 55.10, 52.70, 16.70, 20.50, 24.40, 43.40, 14.70, 72.70, 43.50, 49.70, 23.00, 95.50, 38.00, 65.80, 33.00, 51.00, 28.50, 41.50, 54.20, 38.10, 83.20, 49.80, 21.20, 68.70, 36.40, 46.00, 73.30, 41.60, 70.50, 25.80, 45.20, 26.90, 60.00, 18.30, 57.10, 60.70, 17.00, 25.90, 21.00, 12.60, 23.10, 71.10, 46.60, 16.20, 41.90, 34.40, 19.70, 30.60, 23.30, 63.00, 36.50, 53.60, 29.40, 55.10, 62.90, 29.20, 14.50, 17.40, 30.40, 29.20, 54.70, 16.30, 83.90, 31.30, 26.70, 72.70, 73.80, 23.80, 26.30, 31.40, 69.20, 96.80, 40.90, 29.70, 20.70, 20.00, 52.50, 15.40, 26.80, 77.10, 30.40, 18.00, 58.20, 18.70, 30.50, 18.90, 65.20, 15.10, 44.40, 29.90, 10.70, 49.30, 66.00, 71.70, 68.60, 91.70, 50.10, 30.20, 19.70, 73.50, 80.40, 96.80, 66.10, 54.90, 82.50, 15.90, 36.50, 42.30, 16.00, 34.10, 68.00, 20.40, 59.10, 24.70, 42.20, 47.10, 16.10, 21.80, 23.70, 12.60, 30.00, 12.10, 50.20, 40.10, 49.70, 60.10, 74.80, 41.20, 8.50, 33.80, 20.30, 27.00, 26.80, 43.00, 19.80, 89.20, 28.00, 81.30, 69.30, 24.50, 57.50, 37.10, 20.60, 25.90, 19.00, 68.70, 41.70, 12.90, 24.90, 34.20, 92.50, 17.50, 40.20, 73.30, 68.20, 19.40, 55.90, 8.80, 40.70, 40.00, 19.00, 10.00, 69.20, 21.20, 51.40, 48.20, 27.00, 13.80, 29.20, 59.30, 78.70, 87.80, 55.70, 20.70, 15.70, 25.70, 14.10, 24.60, 34.70, 15.80, 36.20, 20.60, 39.30, 14.40, 14.80, 73.20, 23.80, 34.30, 11.50, 16.70, 46.50, 15.30, 64.90, 87.10, 14.90, 69.50, 30.30, 17.80, 61.00, 73.00, 13.40, 44.70, 45.50, 26.00, 13.30, 23.40, 46.60, 26.90, 45.50, 14.20, 24.00, 15.50, 19.00, 18.20, 16.50, 63.70, 24.50, 21.70, 23.50, 14.10, 43.00, 16.40, 63.10, 55.10, 28.50, 88.00, 58.70, 32.80, 23.00, 26.30, 12.70, 61.40, 33.20, 36.40, 36.60, 53.60, 64.00, 59.10, 31.40, 18.10, 82.80, 33.50, 85.60, 25.70, 88.60, 43.90, 19.10, 12.80, 26.80, 25.30, 59.80, 90.40, 48.30, 56.50, 90.50, 30.40, 11.80, 17.70, 26.10, 17.60, 14.80, 67.40, 29.50, 43.90, 44.10, 35.20, 12.10, 82.60, 97.00, 59.50, 41.50, 37.80, 31.70, 28.90, 34.90, 25.10, 26.50, 23.60, 49.60, 43.30, 32.60, 14.10, 32.30, 25.90, 64.60, 42.60, 56.00, 28.40, 51.50, 60.00, 45.30, 29.30, 78.50, 40.00, 21.90, 73.40, 48.80, 35.80, 40.80, 17.80, 26.10, 22.30, 22.20, 44.30, 39.10, 25.80, 19.70, 27.80, 76.60, 40.30, 14.20, 17.10, 34.00, 24.50, 34.90, 31.50]

database.sort()

print("|=|=|=|- Base de Dados 2 -|=|=|=|")
print("-Número de elementos:", len(database))
print("")

print("|=|=|=|- Média -|=|=|=|")
print(f"\n- Funções do Estudante: {media(database): .2f} %")
print(f"\n- Funções do Python: {mean(database): .2f} %")
print("")

print("|=|=|=|- Mediana -|=|=|=|")
print(f"\n- Funções do Estudante: {mediana(database): .2f} %")
print(f"\n- Funções do Python: {median(database): .2f} %")
print("")

print("|=|=|=|- Variância -|=|=|=|")
print(f"\n- Funções do Estudante:")
print(f"  > Variância Amostral: {variancia_amostral(database): .2f} %")
print(f"  > Variância Populacional: {variancia_populacional(database): .2f} %")
print(f"\n- Funções do Python:")
print(f"  > Variância Amostral: {variance(database): .2f} %")
print(f"  > Variância Populacional: {pvariance(database): .2f} % ")
print("")

print("|=|=|=|- Desvio Padrão -|=|=|=|")
print(f"\n- Funções do Estudante:")
print(f"  > Desvio Padrão Amostral: {desvio_padrao_amostral(database): .2f}")
print(f"  > Desvio Padrão Populacional: {desvio_padrao_populacional(database): .2f}")
print(f"\n- Funções do Python: ")
print(f"  > Desvio Padrão Amostral: {stdev(database): .2f} ")
print(f"  > Desvio Padrão Populacional: {pstdev(database): .2f} ")
print("")

print("|=|=|=|- Coeficiente de Variação -|=|=|=|")
print(f"\n- Funções do Estudante:")
print(f"  > Coeficiente de Variação Amostral: {coeficiente_variacao_amostral(database): .2f}% ")
print(f"  > Coeficiente de Variação Populacional: {coeficiente_variacao_populacional(database): .2f} %")
print(f"\n- Funções do Python: ")
print(f"  > Coeficiente de Variação Amostral: {stdev(database) / mean(database) * 100: .2f} %")
print(f"  > Coeficiente de Variação Populacional: {pstdev(database) / mean(database) * 100: .2f} %")
print("")

print("|=|=|=|- Quartis -|=|=|=|")
q1,M, q3 = quartis(database)
quartisModulo = quantiles(database, n = 4)

print(f"\n- Funções do Estudante:")
print(f"  > Primeiro Quartil:{q1}")
print(f"  > Terceiro Quartil: {q3}")
print(f"\nFunções do Python:")
print(f"  > Primeiro Quartil:{quartisModulo[0]}")
print(f"  > Terceiro Quartil: {quartisModulo[2]}")
print("")

print("|=|=|=|- Histograma -|=|=|=|")
hist(database, 15, rwidth = 0.9)
show()
print("")

print("|=|=|=|- Box Plot -|=|=|=|")
boxplot(database)
title("Probabilidade de Diabetes", loc = "center", fontsize = 15)
ylabel("Valores dos database")
show()


